<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:furniture="com.apowo.tuqing.view.furniture.*"
			   width="800" height="600" addedToStage="onAddedToStageHandler(event)"
			   close="onCloseHandler(event)" creationComplete="onCreationCompleted(event)"
			   title="家具编辑器" xmlns:project="com.apowo.tuqing.view.project.*">
	<fx:Script>
		<![CDATA[
			import com.apowo.tuqing.events.FurnitureEvent;
			import com.apowo.tuqing.model.FurnitureManager;
			import com.apowo.tuqing.model.ProjectManager;
			import com.apowo.tuqing.model.data.FurnitureData;
			
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import org.libra.flex.utils.PopUpUtil;
			import org.libra.utils.displayObject.Display45Util;
			import org.libra.utils.displayObject.GraphicsUtil;
			import org.libra.utils.ui.KeyPoll;
			
			import spark.components.TextInput;
			
			public static var topPoint:Point = new Point(0, 20);
			
			private static const NET_ROWS:int = 10;
			private static const NET_COLS:int = 10;
			
			private var _furnitureData:FurnitureData;
			
			private var _isDraging:Boolean;
			
			private var _lastDragX:Number;
			
			private var _lastDragY:Number;
			
			private var _furniture:Furniture;
			
			/**
			 * 所有占位网格的集合
			 */
			private var _subfaceNetList:Vector.<Vector.<SubfaceNet>> = new Vector.<Vector.<SubfaceNet>>();
			
			/**
			 * 当前的操作 
			 */
			private var _curOperation:String = ToolBarEvent.MOVE;
			
			public function get furnitureData():FurnitureData
			{
				return _furnitureData;
			}

			public function set furnitureData(value:FurnitureData):void
			{
				_furnitureData = value;
			}

			protected function onCloseHandler(event:CloseEvent = null):void
			{
				KeyPoll.getInstance(this.stage).removeEventListener(KeyboardEvent.KEY_UP, onKeyUp);
				KeyPoll.getInstance(this.stage).removeEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				
				_furniture.removeEventListener(MouseEvent.MOUSE_DOWN, this.onMouseDown);
				this.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				this.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				
				_toolBar.removeEventListener(ToolBarEvent.TOOL_BAR_EVENT, onToolBarEvent);
				
				// 关闭的时候，刷新一下家具管理的关键字
				FurnitureManager.instance.updateFurnitureShowingList();
				
				PopUpUtil.instance.removePopUp(this, 1);
			}
			
			protected function onCreationCompleted(event:FlexEvent):void
			{
				topPoint.x = (this.width - _listGroup.width) >> 1;
				var width:int = ProjectManager.instance.curProjectData.cellWidth;
				Display45Util.setContentSize(width, width >> 1);
				Display45Util.setTopPoint(topPoint);
				
				_furnitureGroup.graphics.beginFill(0xff00ff, 0);
				_furnitureGroup.graphics.drawRect(0, 0, _furnitureGroup.width, _furnitureGroup.height);
				_furnitureGroup.graphics.endFill();
				GraphicsUtil.drawDiamondNet(_furnitureGroup.graphics, new Point(), 0, 0, NET_ROWS, NET_COLS, width, 0xff0000, false);
				
				_furniture = new Furniture();
				_furnitureGroup.addElement(_furniture);
				
				setFurntiureData(_furnitureData);
				
				_furniture.addEventListener(MouseEvent.MOUSE_DOWN, this.onMouseDown);
				this.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				_listGroup.addEventListener(FurnitureEvent.FURNITURE_EVENT, onFurnitureListEvent);
				
				_toolBar.addEventListener(ToolBarEvent.TOOL_BAR_EVENT, onToolBarEvent);
			}
			
			private function onFurnitureListEvent(evt:FurnitureEvent):void{
				switch(evt.subType){
					case FurnitureEvent.SELECT_FURNITURE:
						setFurntiureData(evt.data as FurnitureData)
						break;
				}
			}
			
			private function setFurntiureData(data:FurnitureData):void{
				_furniture.data = data;
				_furniture.x = topPoint.x - data.offsetX;
				_furniture.y = topPoint.y - data.offsetY;
				for(var i:int = 0; i < _subfaceNetList.length; i++){
					for each(var net:SubfaceNet in _subfaceNetList[i]){
						if(net){
							_subfaceNetContainer.removeChild(net);
						}
					}
				}
				
				var arr:Vector.<Vector.<int>> = data.getSubfaceArr();
				var hasNet:Boolean = false;
				// 初始化占位格子的集合
				for(var row:int = 0; row < NET_ROWS; row++){
					_subfaceNetList[row] = new Vector.<SubfaceNet>();
					for(var col:int = 0; col < NET_COLS; col++){
						hasNet = false;
						if(row < arr.length){
							if(col < arr[row].length){
								hasNet = arr[row][col] == 1;
							}
						}
						if(hasNet){
							net = new SubfaceNet(row, col);
							_subfaceNetContainer.addChild(net);
						}else{
							net = null;
						}
						_subfaceNetList[row][col] = net;
					}
				}
			}
			
			private function onMouseDown(evt:MouseEvent):void{
				if(_curOperation == ToolBarEvent.MOVE){
					_lastDragX = evt.stageX;
					_lastDragY = evt.stageY;
					_isDraging = true;	
				}
			}
			
			private function onMouseUp(evt:MouseEvent):void{
				_isDraging = false;
				if(_curOperation == ToolBarEvent.SUB_FACE){
					var p:Point = Display45Util.getItemIndex(new Point(evt.localX, evt.localY));
					if(p.x >= 0 && p.x < NET_ROWS && p.y >= 0 && p.y < NET_COLS){
						// 占位
						if(_subfaceNetList[p.y][p.x]){
							_subfaceNetContainer.removeChild(_subfaceNetList[p.y][p.x]);
							_subfaceNetList[p.y][p.x] = null;
							_furniture.data.setSubfaceArr(p.y, p.x, false);
						}else{
							var net:SubfaceNet = new SubfaceNet(p.y, p.x);
							_subfaceNetContainer.addChild(net);
							_subfaceNetList[p.y][p.x] = net;
							_furniture.data.setSubfaceArr(p.y, p.x, true);
						}
					}
				}
			}
			
			private function onMouseMove(evt:MouseEvent):void{
				if(_isDraging){
					var offsetX:Number = evt.stageX - _lastDragX;
					var offsetY:Number = evt.stageY - _lastDragY;
					_lastDragX = evt.stageX;
					_lastDragY = evt.stageY;
					_furniture.x += offsetX;
					_furniture.y += offsetY;
					
					updateFurnitureOffset();
				}
				if(!(focusManager.getFocus() is TextInput))
					_furniture.setFocus();
			}
			
			private function updateFurnitureOffset():void{
				_furniture.data.offsetX = topPoint.x - _furniture.x;
				_furniture.data.offsetY = topPoint.y - _furniture.y;
			}
			
			protected function onAddedToStageHandler(event:Event):void
			{
				KeyPoll.getInstance(this.stage).addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
				KeyPoll.getInstance(this.stage).addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				
				this.setFocus();
			}
			
			private function onKeyUp(evt:KeyboardEvent):void{
				switch(evt.keyCode){
					case Keyboard.UP:
						_furniture.y--;
						updateFurnitureOffset();
						break;
					case Keyboard.DOWN:
						_furniture.y++;
						updateFurnitureOffset();
						break;
					case Keyboard.LEFT:
						_furniture.x--;
						updateFurnitureOffset();
						break;
					case Keyboard.RIGHT:
						_furniture.x++;
						updateFurnitureOffset();
						break;
				}
			}
			
			private function onKeyDown(evt:KeyboardEvent):void{
				
			}
			
			private function onToolBarEvent(evt:ToolBarEvent):void{
				_curOperation = evt.subType;
				if(_curOperation == ToolBarEvent.MOVE){
					_furniture.mouseEnabled = true;
					_furniture.alpha = 1.0;
					_subfaceNetContainer.visible = false;
				}else{
					_furniture.mouseEnabled = false;
					_furniture.alpha = 0.5;
					_subfaceNetContainer.visible = true;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:HGroup width="100%" height="100%">
		<project:FurnitureList id="_listGroup" width="160" height="100%"/>
		<s:VGroup width="100%" height="100%">
			<furniture:ToolBar id="_toolBar" width="100%" height="26"/>
			<s:Group id="_furnitureGroup" width="100%" height="260">
				<mx:UIComponent id="_subfaceNetContainer" width="100%" height="100%" visible="false"/>
			</s:Group>
			<s:VGroup width="100%" height="100%">
				
			</s:VGroup>
		</s:VGroup>
	</s:HGroup>
</s:TitleWindow>
