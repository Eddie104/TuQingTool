<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="onCreationCompleted(event)" addedToStage="onAddedToStage(event)" xmlns:map="com.apowo.tuqing.view.map.*" xmlns:toolBar="com.apowo.tuqing.view.map.toolBar.*">
	<fx:Script>
		<![CDATA[
			import com.apowo.tuqing.model.FurnitureManager;
			import com.apowo.tuqing.model.data.FurnitureData;
			import com.apowo.tuqing.model.data.LocalMapData;
			import com.apowo.tuqing.view.furniture.Furniture;
			import com.apowo.tuqing.view.map.toolBar.MapToolBarEvent;
			
			import mx.events.FlexEvent;
			
			import org.libra.utils.displayObject.Display45Util;
			import org.libra.utils.displayObject.GraphicsUtil;
			
			private var _topPoint:Point = new Point();
			
			private var _mapData:LocalMapData = null;
			
			private var _curMouseRow:int = -1;
			
			private var _curMouseCol:int = -1;
			
			private var _isDragingNet:Boolean = false;
			
			// 主要的操作对象，是地图还是家具
			private var _mainOperator:String = MapToolBarEvent.MAP_OPERATOR;
			
			// 次要操作，比如：如果是主要操作对象是地图的话，那么次要操作就可以是编辑可行走点或者编辑不可行走点
			private var _subOperator:String = MapToolBarEvent.MAP_CAN_MOVE;
			
			public function drawMap(mapData:LocalMapData):void{
				_mapData = mapData;
				if(mapData){
					var mapWidth:int = mapData.getWidth();
					var mapHeight:int = mapData.getHeight();
					
					_topPoint.x = mapData.cellRows * mapData.cellWidth >> 1;
					_topPoint.y = 150;
					this._netLayer.width = _topPoint.x + (mapData.cellCols * mapData.cellWidth >> 1);
					this._netLayer.height = _topPoint.y +  mapHeight;
					
					Display45Util.setContentSize(mapData.cellWidth, mapData.cellWidth >> 1);
					Display45Util.setTopPoint(_topPoint);
					
					GraphicsUtil.drawRect(this._netLayer.graphics, 0, _topPoint.y, mapWidth, mapHeight, 0x00ff00, 0, true);
					GraphicsUtil.lineRect(_netLayer.graphics, _topPoint.x - (mapData.cellRows * mapData.cellWidth >> 1), _topPoint.y, mapWidth, mapHeight, 0xffffff, false);
					GraphicsUtil.drawDiamondNet(this._netLayer.graphics, new Point(), 0, 0, mapData.cellRows,mapData.cellCols, mapData.cellWidth, 0xff0000, false);
					
					_floorLayer.reset(_mapData);
					
					
					// test
					var f:Furniture = new Furniture();
					f.data = FurnitureManager.instance.furnitureDataList[0];
					f.setRowAndCol(0, 0);
					_propLayer.addElement(f);
				}
			}
			
			public function resetTopPoint():void{
				Display45Util.setTopPoint(_topPoint);
			}
			
			protected function onAddedToStage(event:Event):void
			{
				_netLayer.mouseEnabled = true;
				_netLayer.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoved);
				_netLayer.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				_netLayer.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				_netLayer.addEventListener(MouseEvent.CLICK, onClicked);
			}
			
			private function onMouseMoved(evt:MouseEvent):void{
				var p:Point = Display45Util.getItemIndex(new Point(evt.localX, evt.localY));
				if(_curMouseRow != p.y || _curMouseCol != p.x){
					_curMouseRow = p.y;
					_curMouseCol = p.x;
					if(evt.buttonDown){
						if(_isDragingNet){
							_floorLayer.drawNet(p.y, p.x);	
						}
					}
				}
			}
			
			private function onMouseDown(evt:MouseEvent):void{
				var p:Point = Display45Util.getItemIndex(new Point(evt.localX, evt.localY));
				if(_mainOperator == MapToolBarEvent.MAP_OPERATOR){
					if(evt.target == _netLayer){
						_isDragingNet = true;
						_floorLayer.startRow = p.y;
						_floorLayer.startCol = p.x;	
					}
				}
			}
			
			private function onMouseUp(evt:MouseEvent):void{
				if(_mainOperator == MapToolBarEvent.MAP_OPERATOR){
					if(_isDragingNet){
						_isDragingNet = false;
						var operator:Function = _floorLayer.fillFloorTile;
						if(_subOperator == MapToolBarEvent.MAP_CAN_NOT_MOVE){
							operator = _floorLayer.clearFloorTile;
						}
						
						var p:Point = Display45Util.getItemIndex(new Point(evt.localX, evt.localY));
						var rect:Rectangle = _floorLayer.getNetRectangle(p.y, p.x);
						for(var row:int = rect.x; row < rect.x + rect.width; row++){
							for(var col:int = rect.y; col < rect.y + rect.height; col++){
								operator(row, col);
							}
						}	
					}
				}
			}
			
			private function onClicked(evt:MouseEvent):void{
//				var p:Point = Display45Util.getItemIndex(new Point(evt.localX, evt.localY));
//				fillFloorTile(p.y, p.x);
			}
			
			protected function onCreationCompleted(event:FlexEvent):void
			{
				_toolBar.addEventListener(MapToolBarEvent.MAP_TOOL_BAR_EVENT, onMapToolBarEvent);
			}
			
			private function onMapToolBarEvent(evt:MapToolBarEvent):void{
				_mainOperator = evt.subType;
				_subOperator = evt.data ? evt.data.toString() : null;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<toolBar:MapGroupToolBar id="_toolBar" width="100%" height="26"/>
	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">
			<mx:UIComponent id="_netLayer" mouseEnabled="false" width="100%" height="100%"/>
			<map:FloorLayer id="_floorLayer" width="100%" height="100%"/>
			<s:Group id="_propLayer" width="100%" height="100%"/>
		</s:Group>
	</s:Scroller>
</s:VGroup>
